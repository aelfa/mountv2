#!/usr/bin/with-contenv bash
# shellcheck shell=bash
# Copyright (c) 2020, MrDoob
# All rights reserved.
function log() {
echo "[Mount] ${1}"
}
#!/usr/bin/with-contenv bash
# shellcheck shell=bash
# Copyright (c) 2020, MrDoob
# All rights reserved.
# cleanup remotes based of rclone.conf file
# only clean remotes thats inside the rclone.conf 

## function source start
IFS=$'\n'
filter="$1"
config=/config/rclone.conf
#rclone listremotes | gawk "$filter"
mapfile -t mounts < <(eval rclone listremotes --config=${config} | grep "$filter" | sed -e 's/[GDSA00-99C:]//g' | sed '/^$/d')
## function source end

DIR_CACHE_TIME=${DIR_CACHE_TIME:-2m}
VFS_READ_CHUNK_SIZE=${VFS_READ_CHUNK_SIZE:-96M}
VFS_CACHE_MAX_AGE=${VFS_CACHE_MAX_AGE:-675h}
VFS_READ_CHUNK_SIZE_LIMIT=${VFS_READ_CHUNK_SIZE_LIMIT:-1G}
VFS_CACHE_MODE=${VFS_CACHE_MODE:-writes}
VFS_CACHE_MAX_SIZE=${VFS_CACHE_MAX_SIZE:-10G}
BUFFER_SIZE=${BUFFER_SIZE:-48M}
RC_ENABLED=${RC_ENABLED:-false}
RC_ADDR=${RC_ADDR:-0.0.0.0:25975}
RC_USER=${RC_USER:-user}
RC_PASS=${RC_PASS:-xxx}
POLL_INTERVAL=${POLL_INTERVAL:-5m}
LOGLEVEL=${LOGLEVEL:-INFO}
UAGENT=${UAGENT:-somerandstring}
SMOUNT=/config/scripts
SDOWN=/mnt/downloads

if [ ! -d ${SMOUNT} ]; then
   mkdir -p ${SMOUNT} && chown -hR abc:abc ${SMOUNT} && chmod -R 775 ${SMOUNT}
else
   chown -hR abc:abc ${SMOUNT} && chmod -R 775 ${SMOUNT}
fi
if [ ! -d ${SDOWN} ]; then
   mkdir -p ${SDOWN} && chown -hR abc:abc ${SDOWN} && chmod -R 775 ${SDOWN}
else
   chown -hR abc:abc ${SDOWN} && chmod -R 775 ${SDOWN}
fi

## RUN MOUNT ##
for i in ${mounts[@]}; do
  if [ ! -d "/mnt/drive-$i" ]; then     
     #log; log CREATE EMPTY DIRECTORIES $i; log
     mkdir -p /mnt/drive-$i
     chown -hR abc:abc /mnt/drive-$i
     chmod -R 775 /mnt/drive-$i
  fi
  if [ "$(ls /mnt/drive-$i | wc -l)" -gt 1 ]; then     
    #log; log UNMOUNTING $i; log
    fusermount -uzq /mnt/drive-$i
  fi
  if [ -f "${SMOUNT}/$i-mount.sh" ]; then
     #log; log REMOVE Script $i; log
     rm -f "${SMOUNT}/$i-mount.sh"
  fi
  #log; log CREATE $i LOGFOLDER; log
  mkdir -p /config/logs/ && mkdir -p /logs/$i/
  chmod -R 775 /config/logs/ && chown -hR abc:abc /config/logs/
  #log; log CREATE MOUNT COMMAND $i; log
  ddaylic=$(date +"%Y")
  dday=$(date)
  echo -e "#!/usr/bin/with-contenv bash
# shellcheck shell=bash ##
# Copyright (c) ${dday}, MrDoob ##
# rclone mount for $i over-shell-exec-command ##
# create day = ${dday}
# All rights reserved. ##
##\n
rclone mount $i: /mnt/drive-$i \\
    --config=${config} \\
    --log-file=/config/logs/rclone-$i.log \\
    --log-level=${LOGLEVEL} \\
    --allow-non-empty \\
    --uid=1000 --gid=1000 --umask=002 \\
    --allow-other --timeout=1h --tpslimit=8 \\
    --drive-skip-gdocs --user-agent=${UAGENT} \\
    --dir-cache-time=${DIR_CACHE_TIME} \\
    --vfs-cache-mode=${VFS_CACHE_MODE} \\
    --vfs-cache-max-age=${VFS_CACHE_MAX_AGE} \\
    --vfs-cache-max-size=${VFS_CACHE_MAX_SIZE} \\
    --vfs-read-chunk-size-limit=${VFS_READ_CHUNK_SIZE_LIMIT} \\
    --vfs-read-chunk-size=${VFS_READ_CHUNK_SIZE} \\
    --buffer-size=${BUFFER_SIZE} --fast-list \\
    --drive-chunk-size=128M --drive-use-trash=false \\
    --drive-server-side-across-configs=true \\
    --drive-stop-on-upload-limit & \n" >> ${SMOUNT}/$i-mount.sh
    chmod 775 ${SMOUNT}/$i-mount.sh && chown abc:abc ${SMOUNT}/$i-mount.sh
    log "-> Mount file created for $i <-"
done
#EOF#