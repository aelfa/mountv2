#!/usr/bin/with-contenv bash
# shellcheck shell=bash
# Copyright (c) 2020, MrDoob
# All rights reserved.
function log() {
echo "[Mount] ${1}"
}
source /config/scripts/rclone.env
echo "
-------------------------------------------------------
   DOCKER ENV vars
-------------------------------------------------------
   TimeZone                       ${TZ}
   DISCORD_EMBED_TITEL            ${DISCORD_EMBED_TITEL}
   DISCORD_NAME_OVERRIDE          ${DISCORD_NAME_OVERRIDE}
   DIR_CACHE_TIME                 ${DIR_CACHE_TIME}
   DRIVE_CHUNK_SIZE               ${DRIVE_CHUNK_SIZE}
   DRIVE_TRASH                    ${DRIVE_TRASH}
   VFS_CACHE_POLL_INTERVAL        ${VFS_CACHE_POLL_INTERVAL}
   VFS_READ_CHUNK_SIZE            ${VFS_READ_CHUNK_SIZE}
   VFS_CACHE_MAX_AGE              ${VFS_CACHE_MAX_AGE}
   VFS_READ_CHUNK_SIZE_LIMIT      ${VFS_READ_CHUNK_SIZE_LIMIT}
   VFS_CACHE_MODE                 ${VFS_CACHE_MODE}
   VFS_CACHE_MAX_SIZE             ${VFS_CACHE_MAX_SIZE} per drive
   BUFFER_SIZE                    ${BUFFER_SIZE}
   LOGLEVEL                       ${LOGLEVEL}
   UAGENT                         ${UAGENT}
   PUID                           ${PUID}
   PGID                           ${PGID}
-------------------------------------------------------
"
##### FOLDER START #####
SMOUNT=/config/scripts
SDOWN=/mnt/downloads
SUNION=/mnt/unionfs
SCACHE=/tmp/rclone_cache
DFOLD=/config/discord
rm -rf /config/logs/ && mkdir -p /config/logs
mkdir -p ${SMOUNT} && chown -hR abc:abc ${SMOUNT} && chmod -R 775 ${SMOUNT}
mkdir -p ${SDOWN} && chown -hR abc:abc ${SDOWN} && chmod -R 775 ${SDOWN}
mkdir -p ${SUNION} && chown -hR abc:abc ${SUNION} && chmod -R 775 ${SUNION}
mkdir -p ${SCACHE} && chown -hR abc:abc ${SCACHE} && chmod -R 775 ${SCACHE}
mkdir -p ${DFOLD} && chown -hR abc:abc ${DFOLD} && chmod -R 775 ${DFOLD}
##### FOLDER END #####
rm -rf /tmp/rclone-mount.file && touch /tmp/rclone-mount.file
rm -rf /tmp/RC_ADDRESS && rm -rf ${SMOUNT}/rc-refresh-**.sh
## function source start
echo "5572" > /tmp/RCPORT
IFS=$'\n'
filter="$1"
config=/config/rclone/rclone-docker.conf
mapfile -t mounts < <(eval rclone listremotes --config=${config} | grep "$filter" | sed -e 's/[GDSA00-99C:]//g' | sed '/^$/d')
##### RUN MOUNT #####
for i in ${mounts[@]}; do
  if [ ! -d "/mnt/drive-$i" ]; then     
     mkdir -p /mnt/drive-$i && mkdir -p /tmp/rclone_cache/
     chown -hR abc:abc /mnt/drive-$i && chown -hR abc:abc /tmp/rclone_cache/
     chmod -R 775 /mnt/drive-$i && chmod -R 775 /tmp/rclone_cache/
  fi
  if [ "$(ls /mnt/drive-$i | wc -l)" -gt 1 ]; then     
    fusermount -uzq /mnt/drive-$i
  fi
  rm -rf ${SMOUNT}/$i-mount.sh && rm -rf ${SMOUNT}/$i-rc-file.sh
  touch /config/logs/rclone-$i.log
  chmod -R 775 /config/logs/ && chown -hR abc:abc /config/logs/
  truncate -s 0 /config/logs/**.log >> /dev/null
  ddaylic=$(date +"%Y")
  dday=$(date)
  RC_ADDRESS=$(echo $(( $(cat /tmp/RCPORT) +1)))
  echo ${RC_ADDRESS} >/tmp/RCPORT
  echo -n "/mnt/drive-$i=NC:" >>/tmp/rclone-mount.file
  echo -e "#!/usr/bin/with-contenv bash
# shellcheck shell=bash ##
# Copyright (c) ${ddaylic}, MrDoob ##
# rclone mount for $i over-shell-exec-command ##
# create day = ${dday}
# All rights reserved. ##
##\n

rclone mount $i: /mnt/drive-$i \\
    --config=${config} \\
    --log-file=/config/logs/rclone-$i.log \\
    --log-level=${LOGLEVEL} \\
    --uid=${PUID} --gid=${PGID} \\
    --allow-other --allow-non-empty \\
    --drive-skip-gdocs --timeout=1h \\
    --cache-dir=/tmp/rclone_cache/ \\
    --tpslimit=8 --tpslimit-burst=8 \\
    --no-modtime --no-seek \\
    --ignore-errors --use-mmap \\
    --user-agent=${UAGENT} --no-checksum \\
    --drive-chunk-size=${DRIVE_CHUNK_SIZE} \\
    --drive-use-trash=${DRIVE_TRASH} \\
    --buffer-size=${BUFFER_SIZE} \\
    --dir-cache-time=${DIR_CACHE_TIME} \\
    --vfs-cache-poll-interval=${VFS_CACHE_POLL_INTERVAL} \\
    --vfs-cache-mode=${VFS_CACHE_MODE} \\
    --vfs-cache-max-age=${VFS_CACHE_MAX_AGE} \\
    --vfs-cache-max-size=${VFS_CACHE_MAX_SIZE} \\
    --vfs-read-chunk-size-limit=${VFS_READ_CHUNK_SIZE_LIMIT} \\
    --vfs-read-chunk-size=${VFS_READ_CHUNK_SIZE} \\
    --rc --rc-no-auth --rc-addr=localhost:${RC_ADDRESS} \\
    --daemon \n" >> ${SMOUNT}/$i-mount.sh

echo -e "#!/usr/bin/with-contenv bash
# shellcheck shell=bash ##
# Copyright (c) ${ddaylic}, MrDoob ##
# rclone rc vfs/refresh for $i over-shell-exec-command ##
# create day = ${dday}
# All rights reserved. ##
##\n
rclone rc vfs/refresh \\
       --config=${config} \\
       --rc-addr=localhost:${RC_ADDRESS} \\
       --log-file=/config/logs/rc-refresh-$i.log \\
       --log-level=${LOGLEVEL} \
\
chmod a+x  ${SMOUNT}/$i-rc-file.sh \
chown -hR abc:abc ${SMOUNT}/$i-rc-file.sh \
chown -hR abc:abc /tmp/rclone_cache/ 
#<EOF>#" >> ${SMOUNT}/$i-rc-file.sh
    chmod a+x  ${SMOUNT}/$i-rc-file.sh && chown -hR abc:abc ${SMOUNT}/$i-rc-file.sh
    chown -hR abc:abc /tmp/rclone_cache/
    log "-->> rclone rc refresh file created for $i <<--"
done

#EOF#
